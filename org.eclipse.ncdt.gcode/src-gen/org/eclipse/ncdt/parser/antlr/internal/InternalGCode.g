/*
 * generated by Xtext 2.10.0
 */
grammar InternalGCode;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.ncdt.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.ncdt.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.ncdt.services.GCodeGrammarAccess;

}

@parser::members {

 	private GCodeGrammarAccess grammarAccess;

    public InternalGCodeParser(TokenStream input, GCodeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected GCodeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getBlocksBlockParserRuleCall_0());
			}
			lv_Blocks_0_0=ruleBlock
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"Blocks",
					lv_Blocks_0_0,
					"org.eclipse.ncdt.GCode.Block");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBlockAccess().getGBlockParserRuleCall_0());
		}
		this_GBlock_0=ruleGBlock
		{
			$current = $this_GBlock_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockAccess().getMBlockParserRuleCall_1());
		}
		this_MBlock_1=ruleMBlock
		{
			$current = $this_MBlock_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGBlock
entryRuleGBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGBlockRule()); }
	iv_ruleGBlock=ruleGBlock
	{ $current=$iv_ruleGBlock.current; }
	EOF;

// Rule GBlock
ruleGBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_GCODE
				{
					newLeafNode(lv_name_0_0, grammarAccess.getGBlockAccess().getNameGCODETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGBlockRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.ncdt.GCode.GCODE");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGBlockAccess().getArgumentsArgumentParserRuleCall_1_0());
				}
				lv_arguments_1_0=ruleArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGBlockRule());
					}
					add(
						$current,
						"arguments",
						lv_arguments_1_0,
						"org.eclipse.ncdt.GCode.Argument");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleMBlock
entryRuleMBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMBlockRule()); }
	iv_ruleMBlock=ruleMBlock
	{ $current=$iv_ruleMBlock.current; }
	EOF;

// Rule MBlock
ruleMBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_MCODE
				{
					newLeafNode(lv_name_0_0, grammarAccess.getMBlockAccess().getNameMCODETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMBlockRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.ncdt.GCode.MCODE");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMBlockAccess().getArgumentsArgumentParserRuleCall_1_0());
				}
				lv_arguments_1_0=ruleArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMBlockRule());
					}
					add(
						$current,
						"arguments",
						lv_arguments_1_0,
						"org.eclipse.ncdt.GCode.Argument");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleArgument
entryRuleArgument returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	iv_ruleArgument=ruleArgument
	{ $current=$iv_ruleArgument.current.getText(); }
	EOF;

// Rule Argument
ruleArgument returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_COORD_0=RULE_COORD
		{
			$current.merge(this_COORD_0);
		}
		{
			newLeafNode(this_COORD_0, grammarAccess.getArgumentAccess().getCOORDTerminalRuleCall_0());
		}
		    |
		this_SCODE_1=RULE_SCODE
		{
			$current.merge(this_SCODE_1);
		}
		{
			newLeafNode(this_SCODE_1, grammarAccess.getArgumentAccess().getSCODETerminalRuleCall_1());
		}
		    |
		this_FCODE_2=RULE_FCODE
		{
			$current.merge(this_FCODE_2);
		}
		{
			newLeafNode(this_FCODE_2, grammarAccess.getArgumentAccess().getFCODETerminalRuleCall_2());
		}
		    |
		this_ECODE_3=RULE_ECODE
		{
			$current.merge(this_ECODE_3);
		}
		{
			newLeafNode(this_ECODE_3, grammarAccess.getArgumentAccess().getECODETerminalRuleCall_3());
		}
	)
;

fragment RULE_NUM : '-'? RULE_INT ('.' RULE_INT)?;

fragment RULE_INT : ('0'..'9')+;

RULE_GCODE : 'G' RULE_INT;

RULE_MCODE : 'M' RULE_INT;

RULE_SCODE : 'S' RULE_NUM;

RULE_FCODE : 'F' RULE_NUM;

RULE_ECODE : 'E' RULE_NUM;

RULE_COORD : ('X' RULE_NUM|'Y' RULE_NUM|'Z' RULE_NUM);

RULE_SL_COMMENT : ';' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
