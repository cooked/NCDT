/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.ncdt.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GCodeGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.Model");
		private final Assignment cBlocksAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBlocksBlockParserRuleCall_0 = (RuleCall)cBlocksAssignment.eContents().get(0);
		
		//// implementation of 
		//// https://en.wikipedia.org/wiki/G-code
		//Model:
		//	Blocks+=Block+;
		@Override public ParserRule getRule() { return rule; }
		
		//Blocks+=Block+
		public Assignment getBlocksAssignment() { return cBlocksAssignment; }
		
		//Block
		public RuleCall getBlocksBlockParserRuleCall_0() { return cBlocksBlockParserRuleCall_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.Block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Block:
		//	GBlock | MBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//GBlock | MBlock
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GBlock
		public RuleCall getGBlockParserRuleCall_0() { return cGBlockParserRuleCall_0; }
		
		//MBlock
		public RuleCall getMBlockParserRuleCall_1() { return cMBlockParserRuleCall_1; }
	}
	public class GBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.GBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameGCODETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		
		//GBlock:
		//	name=GCODE arguments+=Argument*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=GCODE arguments+=Argument*
		public Group getGroup() { return cGroup; }
		
		//name=GCODE
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//GCODE
		public RuleCall getNameGCODETerminalRuleCall_0_0() { return cNameGCODETerminalRuleCall_0_0; }
		
		//arguments+=Argument*
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_0() { return cArgumentsArgumentParserRuleCall_1_0; }
	}
	public class MBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.MBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameMCODETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		
		//MBlock:
		//	name=MCODE arguments+=Argument*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=MCODE arguments+=Argument*
		public Group getGroup() { return cGroup; }
		
		//name=MCODE
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//MCODE
		public RuleCall getNameMCODETerminalRuleCall_0_0() { return cNameMCODETerminalRuleCall_0_0; }
		
		//arguments+=Argument*
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_0() { return cArgumentsArgumentParserRuleCall_1_0; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.Argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCOORDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSCODETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFCODETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cECODETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Argument:
		//	COORD | SCODE | FCODE | ECODE;
		@Override public ParserRule getRule() { return rule; }
		
		//COORD | SCODE | FCODE | ECODE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//COORD
		public RuleCall getCOORDTerminalRuleCall_0() { return cCOORDTerminalRuleCall_0; }
		
		//SCODE
		public RuleCall getSCODETerminalRuleCall_1() { return cSCODETerminalRuleCall_1; }
		
		//FCODE
		public RuleCall getFCODETerminalRuleCall_2() { return cFCODETerminalRuleCall_2; }
		
		//ECODE
		public RuleCall getECODETerminalRuleCall_3() { return cECODETerminalRuleCall_3; }
	}
	
	
	private final ModelElements pModel;
	private final BlockElements pBlock;
	private final GBlockElements pGBlock;
	private final MBlockElements pMBlock;
	private final ArgumentElements pArgument;
	private final TerminalRule tNUM;
	private final TerminalRule tINT;
	private final TerminalRule tGCODE;
	private final TerminalRule tMCODE;
	private final TerminalRule tSCODE;
	private final TerminalRule tFCODE;
	private final TerminalRule tECODE;
	private final TerminalRule tCOORD;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public GCodeGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pBlock = new BlockElements();
		this.pGBlock = new GBlockElements();
		this.pMBlock = new MBlockElements();
		this.pArgument = new ArgumentElements();
		this.tNUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.NUM");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.INT");
		this.tGCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.GCODE");
		this.tMCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.MCODE");
		this.tSCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.SCODE");
		this.tFCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.FCODE");
		this.tECODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.ECODE");
		this.tCOORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.COORD");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ncdt.GCode.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.ncdt.GCode".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// implementation of 
	//// https://en.wikipedia.org/wiki/G-code
	//Model:
	//	Blocks+=Block+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Block:
	//	GBlock | MBlock;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//GBlock:
	//	name=GCODE arguments+=Argument*;
	public GBlockElements getGBlockAccess() {
		return pGBlock;
	}
	
	public ParserRule getGBlockRule() {
		return getGBlockAccess().getRule();
	}
	
	//MBlock:
	//	name=MCODE arguments+=Argument*;
	public MBlockElements getMBlockAccess() {
		return pMBlock;
	}
	
	public ParserRule getMBlockRule() {
		return getMBlockAccess().getRule();
	}
	
	//Argument:
	//	COORD | SCODE | FCODE | ECODE;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//terminal NUM returns ecore::EFloat:
	//	'-'? INT ('.' INT)?;
	public TerminalRule getNUMRule() {
		return tNUM;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal GCODE:
	//	'G' INT;
	public TerminalRule getGCODERule() {
		return tGCODE;
	}
	
	//terminal MCODE:
	//	'M' INT;
	public TerminalRule getMCODERule() {
		return tMCODE;
	}
	
	//terminal SCODE:
	//	'S' NUM;
	public TerminalRule getSCODERule() {
		return tSCODE;
	}
	
	//terminal FCODE:
	//	'F' NUM;
	public TerminalRule getFCODERule() {
		return tFCODE;
	}
	
	//terminal ECODE:
	//	'E' NUM;
	public TerminalRule getECODERule() {
		return tECODE;
	}
	
	//terminal COORD:
	//	'X' NUM | 'Y' NUM | 'Z' NUM;
	public TerminalRule getCOORDRule() {
		return tCOORD;
	}
	
	//terminal SL_COMMENT:
	//	';' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
