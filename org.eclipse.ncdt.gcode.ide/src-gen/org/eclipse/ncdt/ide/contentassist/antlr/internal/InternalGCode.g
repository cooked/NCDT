/*
 * generated by Xtext 2.10.0
 */
grammar InternalGCode;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.eclipse.ncdt.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.ncdt.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.ncdt.services.GCodeGrammarAccess;

}
@parser::members {
	private GCodeGrammarAccess grammarAccess;

	public void setGrammarAccess(GCodeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getModelAccess().getBlocksAssignment()); }
			(rule__Model__BlocksAssignment)
			{ after(grammarAccess.getModelAccess().getBlocksAssignment()); }
		)
		(
			{ before(grammarAccess.getModelAccess().getBlocksAssignment()); }
			(rule__Model__BlocksAssignment)*
			{ after(grammarAccess.getModelAccess().getBlocksAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getAlternatives()); }
		(rule__Block__Alternatives)
		{ after(grammarAccess.getBlockAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGBlock
entryRuleGBlock
:
{ before(grammarAccess.getGBlockRule()); }
	 ruleGBlock
{ after(grammarAccess.getGBlockRule()); } 
	 EOF 
;

// Rule GBlock
ruleGBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGBlockAccess().getGroup()); }
		(rule__GBlock__Group__0)
		{ after(grammarAccess.getGBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMBlock
entryRuleMBlock
:
{ before(grammarAccess.getMBlockRule()); }
	 ruleMBlock
{ after(grammarAccess.getMBlockRule()); } 
	 EOF 
;

// Rule MBlock
ruleMBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMBlockAccess().getGroup()); }
		(rule__MBlock__Group__0)
		{ after(grammarAccess.getMBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArgument
entryRuleArgument
:
{ before(grammarAccess.getArgumentRule()); }
	 ruleArgument
{ after(grammarAccess.getArgumentRule()); } 
	 EOF 
;

// Rule Argument
ruleArgument 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArgumentAccess().getAlternatives()); }
		(rule__Argument__Alternatives)
		{ after(grammarAccess.getArgumentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getGBlockParserRuleCall_0()); }
		ruleGBlock
		{ after(grammarAccess.getBlockAccess().getGBlockParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getMBlockParserRuleCall_1()); }
		ruleMBlock
		{ after(grammarAccess.getBlockAccess().getMBlockParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentAccess().getCOORDTerminalRuleCall_0()); }
		RULE_COORD
		{ after(grammarAccess.getArgumentAccess().getCOORDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getArgumentAccess().getSCODETerminalRuleCall_1()); }
		RULE_SCODE
		{ after(grammarAccess.getArgumentAccess().getSCODETerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getArgumentAccess().getFCODETerminalRuleCall_2()); }
		RULE_FCODE
		{ after(grammarAccess.getArgumentAccess().getFCODETerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getArgumentAccess().getECODETerminalRuleCall_3()); }
		RULE_ECODE
		{ after(grammarAccess.getArgumentAccess().getECODETerminalRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GBlock__Group__0__Impl
	rule__GBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGBlockAccess().getNameAssignment_0()); }
	(rule__GBlock__NameAssignment_0)
	{ after(grammarAccess.getGBlockAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GBlock__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGBlockAccess().getArgumentsAssignment_1()); }
	(rule__GBlock__ArgumentsAssignment_1)*
	{ after(grammarAccess.getGBlockAccess().getArgumentsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MBlock__Group__0__Impl
	rule__MBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMBlockAccess().getNameAssignment_0()); }
	(rule__MBlock__NameAssignment_0)
	{ after(grammarAccess.getMBlockAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MBlock__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMBlockAccess().getArgumentsAssignment_1()); }
	(rule__MBlock__ArgumentsAssignment_1)*
	{ after(grammarAccess.getMBlockAccess().getArgumentsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__BlocksAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getBlocksBlockParserRuleCall_0()); }
		ruleBlock
		{ after(grammarAccess.getModelAccess().getBlocksBlockParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GBlock__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGBlockAccess().getNameGCODETerminalRuleCall_0_0()); }
		RULE_GCODE
		{ after(grammarAccess.getGBlockAccess().getNameGCODETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GBlock__ArgumentsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGBlockAccess().getArgumentsArgumentParserRuleCall_1_0()); }
		ruleArgument
		{ after(grammarAccess.getGBlockAccess().getArgumentsArgumentParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MBlock__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMBlockAccess().getNameMCODETerminalRuleCall_0_0()); }
		RULE_MCODE
		{ after(grammarAccess.getMBlockAccess().getNameMCODETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MBlock__ArgumentsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMBlockAccess().getArgumentsArgumentParserRuleCall_1_0()); }
		ruleArgument
		{ after(grammarAccess.getMBlockAccess().getArgumentsArgumentParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

fragment RULE_NUM : '-'? RULE_INT ('.' RULE_INT)?;

fragment RULE_INT : ('0'..'9')+;

RULE_GCODE : 'G' RULE_INT;

RULE_MCODE : 'M' RULE_INT;

RULE_SCODE : 'S' RULE_NUM;

RULE_FCODE : 'F' RULE_NUM;

RULE_ECODE : 'E' RULE_NUM;

RULE_COORD : ('X' RULE_NUM|'Y' RULE_NUM|'Z' RULE_NUM);

RULE_SL_COMMENT : ';' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
